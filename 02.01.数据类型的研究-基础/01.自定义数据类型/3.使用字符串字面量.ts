export namespace MyNameSpace {
// +--------------------------------------------------------------------------
// |::说明·| 1. 传统声明变量的方法--通过内置的数据类型，声明变量。
// +--------------------------------------------------------------------------
    let myData: string;
    myData = "abc"; //通过sting定义的变量，可以赋值任意字符串。


// +--------------------------------------------------------------------------
// |::说明·| 2. 声明一个变量，他的类型为 字符串 “foo”(如果给这个变量赋值其他字符串就不再可以了)
// +--------------------------------------------------------------------------
    let myValue: "foo";
    myValue = "foo";
// 以下代码，无法通过
// myValue = "bar";


// +--------------------------------------------------------------------------
// |::说明·| 3. 为了明确一个变量只能是某个给定的字符串类型，通常使用 type 先定义数据类型
// +--------------------------------------------------------------------------
    type myType = "foo";
    let myXX: myType;
    myXX = "foo";

// 以下代码，无法通过
// myXX = "bar";


// +--------------------------------------------------------------------------
// |::说明·| 4. 第二三步里面这种自定义数据类型本身没有太多用处。但在多个字符串之间进行枚举的时候，就非常方便了。
// +--------------------------------------------------------------------------
    type myComplexType = "foo" | "bar" | "moo";
    let myYY: myComplexType;
    myYY = "foo"; // 这三个值就可以任意取了。
    myYY = "moo"; // 这三个值就可以任意取了。
    myYY = "bar"; // 这三个值就可以任意取了。
}

