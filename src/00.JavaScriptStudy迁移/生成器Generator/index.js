/**
 * @file   : index.js
 * @time   : 18:20
 * @date   : 2022/3/26
 * @mail   : 9727005@qq.com
 * @creator: ShanDong Xiedali
 * @company: HiLand & RainyTop
 */

// +--------------------------------------------------------------------------
// |::说明·| 1. 定义生成器跟定义函数非常类似，但不同：
// |::一一·| -- 定义生成器的时候，在名称上写一个 *
// |::一一·| -- 生成器内部代码不能使用 return 进行返回，而是使用 yield 产出
// |::一一·|    （在客户端中，每调用一次 next()或for一次循环项,生成器做一次 yield 产出）。
// +--------------------------------------------------------------------------
function* createGenerator() {
    for (let i = 0; i < 2; i++) {
        yield i
    }
}

// +--------------------------------------------------------------------------
// |::说明·| 2. 调用生成器时候，生成器内的代码不是立即执行；而是返回一个生成器实例，类似原来
// |::一一·|    定义的是类型，调用createGenerator()的时候创建这个类型的实例。
// +--------------------------------------------------------------------------
let myGen = createGenerator();
console.log(myGen); // Object [Generator] {}


// +--------------------------------------------------------------------------
// |::说明·| 3. 在客户端通过调用生成器 next()方法执行第 1步里面定义的业务逻辑；
// |::一一·|    每调用一次 next() 方法，会返回一个
// +--------------------------------------------------------------------------
let va;
va = myGen.next();
console.log(va); //{ value: 0, done: false }

va = myGen.next();
console.log(va); //{ value: 1, done: false }

va = myGen.next();
console.log(va); //{ value: undefined, done: true }

// +--------------------------------------------------------------------------
// |::说明·| 4. 虽然可以在生成器对象上手动调用 next，但我们主要是要在循环中使用。
// +--------------------------------------------------------------------------
console.log("--4 -------------");
myGen = createGenerator();
for (const item of myGen) {
    console.log(item);
}
// --output--
//0
//1
