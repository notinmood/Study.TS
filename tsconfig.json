{
    /* 通过 extends 属性实现配置复用，即一个配置文件可以继承另一个文件的配置属性。 */
    // "extends":"path/to/other tsconfig.json"
    // "include"：定义希望被编译文件所在的目录,默认值：["**/*"] 其中：**表示任意目录，*表示任意文件
    "include"        : ["**/*"],
    //"exclude": 定义需要排除在外的目录,默认值：[“node_modules”, “bower_components”, “jspm_packages”]
    "exclude"        : [
        "node_modules"
    ],
    //配置的更多信息 https://www.tslang.cn/docs/handbook/compiler-options.html
    "compilerOptions": {
        /* ══════════════════════════ 编译过程 ══════════════════════════ */
        /* "listFiles":是否在 tsc 编译的时候，显示编译的文件列表信息 */
        "listFiles"                       : false,
        /* "listEmittedFiles"：是否在 tsc 编译的时候,显示打印输出文件列表信息 */
        "listEmittedFiles"                : false,
        // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
        // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
        // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
        // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
        // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
        // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
        /* Interop Constraints */
        // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
        // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
        /* "incremental": 是否启用增量编译。第⼀次编译之后会⽣成⼀个存储编译信息的⽂件，第⼆次编译会在第⼀次的基础上进⾏增量编译，可以提⾼编译的速度*/
        "incremental"                     : true,
        /* ══════════════════════════ Projects ══════════════════════════ */
        // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
        // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
        // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
        // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
        // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

        /* ══════════════════════════ Language and Environment ══════════════════════════ */
        /* "target"：设置ts代码编译的目标版本。可选值：ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext*/
        "target"                          : "ES5",
        /* "lib": 编译过程中需要引入的库文件的列表，即指定代码运行时所包含的库（宿主环境）（在浏览器就不需要dom了，在node.js之中就要安装dom） */
        "lib"                             : ["dom", "es5", "scripthost", "ES2015.Symbol", "ES2015.Iterable"],
        // "jsx": "preserve",                                /* Specify what JSX code is generated. */
        /* "experimentalDecorators":是否启用装饰器语法 */
        // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
        /* "emitDecoratorMetadata": 是否为装饰器提供元数据的支持*/
        // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
        // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
        // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
        // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
        // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
        // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
        // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

        /*  ══════════════════════════ Modules ══════════════════════════ */
        /** "module"：设置编译后代码使用的模块化系统。可选值：CommonJS、UMD、AMD、System、ES2020、ESNext、None
        可以根据不同的 module 选项来把 TypeScript 编译成不同的 JavaScript 模块类型，这有一些你可以忽略的东西：
        AMD：不要使用它，它仅能在浏览器工作；
        SystemJS：这是一个好的实验，已经被 ES 模块替代；
        ES 模块：它并没有准备好。
        使用 module: commonjs 选项来替代这些模式，将会是一个好的主意。
       */
        "module"                          : "CommonJS",
        /* Specify what module code is generated. */
        // "rootDir": "./",                                  /* Specify the root folder within your source files. */
        // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
        // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
        /* "paths": 路径映射，相对于 baseUrl。比如使用 jq 时不想使用默认版本，而需要手动指定版本，
        可进行如下配置。"jquery": ["node_modules/jquery/dist/jquery.min.js"]*/
        // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
        // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
        // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
        /* "types"：默认是不开启了（默认是注释掉的），不开启的话，安装了@types/*** 的各种库都可以使用；
        但如果如果"types": [jquery]，那么就只允许使用 jquery 的 @types 包，即使这个人安装了另一个声明文件，
        比如 @types/node，它的全局变量（例如 process）也不会泄漏到你的代码中。*/
        // "types": ["axios"],                               /* Specify type package names to be included without being referenced in a source file. */
        // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
        // "resolveJsonModule": true,                        /* Enable importing .json files */
        // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

        /* ══════════════════════════ JavaScript Support ══════════════════════════ */
        // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
        // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
        // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

        /* ══════════════════════════ Emit ══════════════════════════ */
        /* "declaration"：生成相应的 '.d.ts' 文件。Generate .d.ts files from TypeScript and JavaScript files in your project. */
        "declaration"                     : true,
        // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
        // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */

        /** "sourceMap"：是否生成连接 ts 和 js 的 map 文件 */
        "sourceMap"                       : true,
        /* "outDir"：编译后文件的所在目录。默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置*/
        "outDir"                          : "./.lib",
        /* "removeComments": 这个配置意思就是编译后移除注释内容 */
        "removeComments"                  : false,
        // "noEmit": true,                                   /* Disable emitting files from a compilation. */
        // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
        // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
        /**
        "downlevelIteration"：如果target为es5的时候，把这个选项打开，可以允许在普通集合对象上调用迭代器；
        当如如果 target为es6到时候，忽略这个选项，集合类型也是可以使用迭代器的。
        */
        "downlevelIteration"              : true,
        /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
        // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
        // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
        // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
        // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
        // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
        /**
        生成的JavaScript文件行尾结束符号（默认跟随系统：windows下为crlf；linux下为lf。）
        可以通过本配置进行强制约束为固定类型的行尾结束符。
        */
        "newLine"                         : "lf",
        /* Set the newline character for emitting files. */
        // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
        // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
        // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
        // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
        // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
        // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
        /* Interop Constraints */
        // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
        // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
        "esModuleInterop"                 : true,
        /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
        // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
        "forceConsistentCasingInFileNames": true,
        /* Ensure that casing is correct in imports. */

        /* ══════════════════════════ Type Checking ══════════════════════════ */
        /* "strict": 这个设置为true,就代表严格执行ts语法，要严格按照ts语法来编写。启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查。 */
        "strict"                          : true,
        /* Enable all strict type-checking options. */
        /* noImplicitAny: 禁止隐式的any类型
        true-不允许你不注解 any 类型（即必须明确对any类型进行注解）
        false-允许不注意 any 类型;
        */
        "noImplicitAny"                   : false,
        // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
        // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
        // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
        // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
        // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
        // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
        // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
        // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
        // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
        // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
        // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
        // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
        // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
        // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
        // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
        // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
        // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
        /* Completeness */
        // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
        "skipLibCheck"                    : true
        /* Skip type checking all .d.ts files. */
    }
}
